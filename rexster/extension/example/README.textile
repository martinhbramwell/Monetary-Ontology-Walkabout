h1. OWL File Loader Example

The example demonstrates how a Web Ontology Language (OWL) file _could_ be loaded into a Blueprints managed database through Rexster's REST interface.

It takes two key aspects of the provided ontology: persons & family relationships, and provides direct REST style access to them.  This follows the "HATEAOS":http://en.wikipedia.org/wiki/HATEOAS pattern of providing callers with URLs that guide them through to access further related information sites &/or pages.


h3. There are some *important notes* about it, though:

* This is _uncontrolled_ ontology storage.  You can use the REST interface to add further data and expect that the ontology's rules will be respected.  However, data loaded by other means, such as Gremlin, will *not* be constrained by ontological rules.
* This was not done by an OWL expert!  It is really no more than an initial experiment while learning OWL, Jena and Tinkerpop simultaneously.
* File loading is *NOT* idempotent.  There will be completely inappropriate repetitions of items if you load a file more than once.
* Rexster extensions weren't designed to adhere to the HTTP Methods standards, although this may change in the future ("@ExtensionDefinition should include HTTP Method differentiation":https://github.com/tinkerpop/rexster/issues/106), so, as you will see, it is necessary to have a mess of    @if ... then ... else@    statements in each method so as to refine the request.

h3. Here's what you *do* get:

* A more complete example of how Rexster Extensions can be used.
* Complete rebuild and retest of your Extension with a single MS-DOS command line:  @mvn clean package && test@ (and that can be reduced to   @mvn -o package && test@  much of the time.)
* An Eclipse & Maven compatible development environment for your Extension.
* Unit testing done exclusively with "curl".  This may seems like underkill, but if you take the view that REST should consist of many small, self-sufficient methods then, for most things jUnit testing internally, ought not to be necessary.

h2. Build and Execution:

h3. Deploy

* Deploying a Rexster Extension involves several steps, all of which are handled by @mvn package@ which in turn calls an ant @build.xml@:
** Stopping Rexster
** Copying our rexster.xml to Rexster's root
** Copying our specially configured Rexster's startup script to Rexster's root
** Copying third-party jars to Rexster's @lib@ directory
** Making a jar of our code of our Extension
** Copying our jar to Rexster's @ext@ directory
** Call our Rexster restart script.

h3. Execution results

You'll find calls to two methods in a class called @net.justtrade.rest.util.RDF_Analyzer@.  These two have nothing to do with the Extension, itself.  Jena's various types of Nodes in RDF triples.  This class groups,  and dumps to Rexster's console, the various types to assist in deciding how best to handle them.




 


 
  





